import { ReadingThemes } from "../styles/reading_themes.slint";

export struct DragDropData {
    source_type: string, // "book", "collection", "author", "tag"
    source_id: string,
    display_name: string,
    icon: string,
    color: string,
}

export component DragDropHandler inherits Rectangle {
    in property <bool> is_dragging: false;
    in property <DragDropData> drag_data;
    in property <bool> can_drop: false;
    in property <string> drop_zone_type: ""; // "collection", "status", "tag"
    in property <string> drop_zone_id: "";
    
    callback drop_accepted(DragDropData, string /* drop_zone_type */, string /* drop_zone_id */);
    callback drag_started(DragDropData);
    callback drag_ended();
    callback drag_entered(string /* drop_zone_type */, string /* drop_zone_id */);
    callback drag_exited();
    
    // Visual feedback for dragging
    background: can-drop && is-dragging ? ReadingThemes.accent-color-light : transparent;
    border-width: can-drop && is-dragging ? 2px : 0px;
    border-color: ReadingThemes.accent-color;
    border-radius: 6px;
    
    animate background, border-width {
        duration: 200ms;
        easing: ease-out;
    }
    
    // Drop zone visual feedback
    if can-drop && is-dragging: drop-indicator := Rectangle {
        width: 100%;
        height: 100%;
        background: rgba(0, 122, 255, 0.1);
        border-radius: 6px;
        border-width: 2px;
        border-color: ReadingThemes.accent-color;
        
        // Animated border
        animate border-color {
            duration: 1000ms;
            easing: ease-in-out;
            // TODO: Add pulsing animation
        }
        
        // Drop zone text
        VerticalLayout {
            alignment: center;
            
            Text {
                text: "üìÅ";
                font-size: 24px;
                horizontal-alignment: center;
                opacity: 0.7;
            }
            
            Text {
                text: "Drop here";
                font-size: 12px;
                color: ReadingThemes.text-secondary;
                horizontal-alignment: center;
                opacity: 0.7;
            }
        }
    }
}

export component DraggableBookCard inherits Rectangle {
    in property <string> book_id;
    in property <string> title;
    in property <string> author;
    in property <string> cover_url;
    in property <bool> is_selected: false;
    
    callback clicked();
    callback drag_started();
    callback context_menu_requested(length /* x */, length /* y */);
    
    property <bool> is_dragging: false;
    property <bool> is_hovering: touch-area.has-hover;
    
    width: 150px;
    height: 220px;
    
    // Card background
    background: is-selected ? ReadingThemes.accent-color-light : 
                (is-hovering ? ReadingThemes.hover-background : ReadingThemes.surface);
    border-radius: 8px;
    border-width: is-selected ? 2px : 1px;
    border-color: is-selected ? ReadingThemes.accent-color : ReadingThemes.border-color;
    drop-shadow-blur: is-hovering ? 8px : 2px;
    drop-shadow-color: ReadingThemes.shadow-light;
    drop-shadow-offset-y: is-hovering ? 4px : 2px;
    
    // Dragging visual feedback
    opacity: is-dragging ? 0.5 : 1.0;
    
    animate background, border-width, drop-shadow-blur, drop-shadow-offset-y, opacity {
        duration: 200ms;
        easing: ease-out;
    }
    
    VerticalLayout {
        padding: 12px;
        spacing: 8px;
        
        // Cover image
        cover-container := Rectangle {
            height: 140px;
            background: ReadingThemes.background-color;
            border-radius: 6px;
            border-width: 1px;
            border-color: ReadingThemes.border-color;
            
            // Placeholder or actual cover
            if cover-url != "": cover-image := Image {
                source: @image-url(cover-url);
                image-fit: ImageFit.cover;
                width: 100%;
                height: 100%;
            }
            
            if cover-url == "": placeholder := Rectangle {
                background: ReadingThemes.background-color;
                
                Text {
                    text: "üìö";
                    font-size: 48px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: ReadingThemes.text-tertiary;
                }
            }
        }
        
        // Book info
        info := VerticalLayout {
            spacing: 4px;
            
            // Title
            title-text := Text {
                text: title;
                font-size: 13px;
                font-weight: 600;
                color: ReadingThemes.text-color;
                wrap: word-wrap;
                overflow: elide;
                max-height: 32px;
            }
            
            // Author
            author-text := Text {
                text: author;
                font-size: 11px;
                color: ReadingThemes.text-secondary;
                wrap: word-wrap;
                overflow: elide;
                max-height: 16px;
            }
        }
    }
    
    // Touch area for interaction
    touch-area := TouchArea {
        clicked => {
            if !is-dragging {
                root.clicked();
            }
        }
        
        mouse-cursor: pointer;
        
        // Handle right-click for context menu
        pointer-event(event) => {
            if event.button == PointerEventButton.right {
                root.context-menu-requested(event.position.x, event.position.y);
            }
        }
    }
    
    // Drag area - separate from touch area for better control
    drag-area := TouchArea {
        // Handle drag start
        pointer-event(event) => {
            if event.kind == PointerEventKind.down && event.button == PointerEventButton.left {
                // Start drag after small movement threshold
                if abs(event.position.x - self.pressed-x) > 5px || abs(event.position.y - self.pressed-y) > 5px {
                    if !is-dragging {
                        root.is-dragging = true;
                        root.drag-started();
                        
                        // Create drag data
                        // TODO: Implement actual drag and drop system
                    }
                }
            } else if event.kind == PointerEventKind.up {
                if is-dragging {
                    root.is-dragging = false;
                    // TODO: Handle drop
                }
            }
        }
        
        property <length> pressed-x;
        property <length> pressed-y;
    }
}

export component DroppableCollectionItem inherits Rectangle {
    in property <string> collection_id;
    in property <string> collection_name;
    in property <string> collection_icon;
    in property <string> collection_color;
    in property <int> book_count;
    in property <bool> is_selected: false;
    in property <bool> can_accept_drop: false;
    in property <bool> is_drag_target: false;
    
    callback clicked();
    callback drop_accepted(string /* book_id */);
    callback drag_entered();
    callback drag_exited();
    
    height: 32px;
    background: is-selected ? ReadingThemes.accent-color : 
                (is-drag-target ? ReadingThemes.accent-color-light : 
                (touch-area.has-hover ? ReadingThemes.hover-background : transparent));
    border-radius: 4px;
    border-width: is-drag-target ? 2px : 0px;
    border-color: ReadingThemes.accent-color;
    
    animate background, border-width {
        duration: 200ms;
        easing: ease-out;
    }
    
    HorizontalLayout {
        padding-left: 8px;
        padding-right: 8px;
        padding-top: 6px;
        padding-bottom: 6px;
        spacing: 6px;
        alignment: center;
        
        // Color indicator
        color-indicator := Rectangle {
            width: 12px;
            height: 12px;
            background: collection-color;
            border-radius: 6px;
        }
        
        // Icon
        icon-text := Text {
            text: collection-icon;
            font-size: 12px;
        }
        
        // Name
        name-text := Text {
            text: collection-name;
            font-size: 12px;
            color: is-selected ? #FFFFFF : ReadingThemes.text-color;
            horizontal-stretch: 1;
            overflow: elide;
        }
        
        // Count
        if book-count > 0: count-text := Text {
            text: book-count;
            font-size: 10px;
            color: is-selected ? rgba(255, 255, 255, 0.8) : ReadingThemes.text-secondary;
        }
        
        // Drop indicator
        if is-drag-target: drop-indicator := Text {
            text: "üìÅ";
            font-size: 12px;
            color: ReadingThemes.accent-color;
        }
    }
    
    // Touch area for clicks
    touch-area := TouchArea {
        clicked => {
            root.clicked();
        }
        mouse-cursor: pointer;
    }
    
    // Drop area for drag and drop
    drop-area := TouchArea {
        // Handle drag enter/exit
        pointer-event(event) => {
            if can-accept-drop {
                if event.kind == PointerEventKind.move {
                    if !is-drag-target {
                        root.is-drag-target = true;
                        root.drag-entered();
                    }
                }
            }
        }
        
        // Handle drop
        // TODO: Implement actual drop handling
    }
}

export component DragDropOverlay inherits Rectangle {
    in property <bool> visible: false;
    in property <DragDropData> drag_data;
    in property <length> mouse_x;
    in property <length> mouse_y;
    
    // Overlay properties
    background: transparent;
    
    if visible: drag-ghost := Rectangle {
        x: mouse-x - 40px;
        y: mouse-y - 20px;
        width: 80px;
        height: 40px;
        background: ReadingThemes.surface;
        border-radius: 6px;
        border-width: 1px;
        border-color: ReadingThemes.border-color;
        drop-shadow-blur: 8px;
        drop-shadow-color: ReadingThemes.shadow-medium;
        drop-shadow-offset-y: 4px;
        opacity: 0.9;
        
        HorizontalLayout {
            padding: 6px;
            spacing: 6px;
            alignment: center;
            
            // Icon
            icon-text := Text {
                text: drag-data.icon;
                font-size: 14px;
            }
            
            // Name
            name-text := Text {
                text: drag-data.display-name;
                font-size: 11px;
                color: ReadingThemes.text-color;
                overflow: elide;
                horizontal-stretch: 1;
            }
        }
    }
}

// Simple drag and drop state management
export global DragDropState {
    in-out property <bool> is-dragging: false;
    in-out property <DragDropData> current-drag-data: {
        source_type: "",
        source_id: "",
        display_name: "",
        icon: "",
        color: "",
    };
    in-out property <length> mouse-x: 0px;
    in-out property <length> mouse-y: 0px;
    
    callback start-drag(DragDropData);
    callback end-drag();
    callback update-mouse-position(length /* x */, length /* y */);
    callback handle-drop(string /* drop_zone_type */, string /* drop_zone_id */);
    
    start-drag(data) => {
        self.is-dragging = true;
        self.current-drag-data = data;
    }
    
    end-drag() => {
        self.is-dragging = false;
        self.current-drag-data = {
            source_type: "",
            source_id: "",
            display_name: "",
            icon: "",
            color: "",
        };
    }
    
    update-mouse-position(x, y) => {
        self.mouse-x = x;
        self.mouse-y = y;
    }
}